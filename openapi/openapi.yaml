openapi: 3.0.3
info:
  title: Swagger for MyHome
  description: This is openapi specification for MyHome application.
  contact:
    email: jeanbaptiste.wittner@outlook.com
  license:
    name: GPL-3.0 License
    url: 'https://www.gnu.org/licenses/gpl-3.0.html'
  version: 0.1.0
externalDocs:
  description: Find out more about Swagger
  url: 'https://swagger.io'
servers:
  - url: 'http://localhost:6080/api'
security:
  - JwtAuth: []
tags:
  - name: authentication
    description: Management of authentication
  - name: collection
    description: Management of collections  
paths:
#  ----- PATHS ---------------------------------------------
#  ----- AUTHENTICATION ------------------------------------
  /authentication/login:
    post:
      tags:
        - authentication
      summary: Login
      operationId: login
      security: []
      requestBody:
        description: Object that need to be authenticated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginParameter'
      responses:
        '200':
          description: successful operation
  /authentication/logout:
    post:
      tags:
        - authentication
      summary: Logout
      operationId: logout
      security: []
      responses:
        '200':
          description: successful operation
  /authentication/registration:
    put:
      tags:
        - authentication
      summary: Register a new user account
      operationId: registration
      security: []
      requestBody:
        description: Object that needs to register a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationParameter'
      responses:
        '200':
          description: successful operation
  /authentication/connectionTest:
    get:
      tags:
        - authentication
      summary: Check if the user are connected
      operationId: connectionTest
      responses:
        '200':
          description: successful operation
  /authentication/refreshAccessToken:
    post:
      tags:
        - authentication
      summary: Refresh access token
      operationId: refreshAccessToken
      responses:
        '200':
          description: successful operation
#  ----- AUTHENTICATION ------------------------------------
#  ----- COLLECTION ----------------------------------------
  /collection:
    post:
      tags:
        - collection
      summary: Create Collection
      operationId: createCollection
      security: []
      requestBody:
        description: Object that need to create a collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionParameter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionDTO'
    get:
      tags:
        - collection
      summary : Get all user collection
      operationId: getCollections
      security: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionSumarryDTO'
#  ----- COLLECTION ----------------------------------------
components:
  securitySchemes:
    JwtAuth:
      type: http
      description: Enter JWT Bearer token **_only_**
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ExceptionDTO:
      type: object
      properties:
        details:
          type: string
        exception:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
      required:
        - details
        - exception
        - message
        - timestamp
#  ----- PARAMETERS  ----------------------------------------
    LoginParameter:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
          writeOnly: true
        rememberMe:
          type: boolean
      required:
        - username
        - password
        - rememberMe
    UserRegistrationParameter:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
          pattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
          pattern: '^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=\S+$).{8,}$'
      required:
        - username
        - email
        - firstName
        - lastName
        - password
    CollectionParameter:
      type: object
      properties:
        collectionName:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/CollectionPermissionParameter'
      required:
        - collectionName
        - usersPermission
    CollectionPermissionParameter:
      type: object
      properties:
        userName:
          type: string
        permission:
          $ref: '#/components/schemas/CollectionPermissionEnum'
      required:
        - userName
        - permission
#  ----- PARAMETERS  ----------------------------------------
#  ----- DTO  -----------------------------------------------
    UserDTO:
      type: object
      properties:
        userId:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleEnum'
      required:
        - userId
        - username
        - email
        - firstName
        - lastName
        - roles
    TokenDTO:
      type: object
      properties:
        jwt:
          type: string
        duration:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/TokenTypeEnum'
      required:
        - jwt
        - duration
        - type
    CollectionDTO:
      type: object
      properties:
        collectionId:
          type: integer
        collectionName:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/CollectionPermissionDTO'
      required:
        - collectionId
        - collectionName
        - permissions
    CollectionSumarryDTO:
      type: object
      properties:
        collectionId:
          type: integer
        collectionName:
          type: string
        permission:
          $ref: '#/components/schemas/CollectionPermissionEnum'
      required:
        - collectionId
        - collectionName
        - permission
    CollectionPermissionDTO:
      type: object
      properties:
        collectionPermissionId:
          type: integer
        userDTO:
          $ref: '#/components/schemas/UserDTO'
        permission:
          $ref: '#/components/schemas/CollectionPermissionEnum'
      required:
        - collectionPermissionId
        - userDTO
        - permission
#  ----- DTO  -----------------------------------------------
#  ----- Enum -----------------------------------------------
    UserRoleEnum:
      type: string
      enum:
        - ADMIN
        - USER
    TokenTypeEnum:
      type: string
      enum:
        - ACCESS_TOKEN
        - REMEMBER_ME_TOKEN
    CollectionPermissionEnum:
      type: string
      enum:
        - ADMIN
        - READ_WRITE
        - READ
